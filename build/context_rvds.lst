


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ; * File      : context_rvds.S
    3 00000000         ; * This file is part of RT-Thread RTOS
    4 00000000         ; * COPYRIGHT (C) 2009, RT-Thread Development Team
    5 00000000         ; *
    6 00000000         ; * The license and distribution terms for this file may
                        be
    7 00000000         ; * found in the file LICENSE in this distribution or at
                       
    8 00000000         ; * http://www.rt-thread.org/license/LICENSE
    9 00000000         ; *
   10 00000000         ; * Change Logs:
   11 00000000         ; * Date           Author       Notes
   12 00000000         ; * 2009-01-17     Bernard      first version
   13 00000000         ; */
   14 00000000         
   15 00000000         ;/**
   16 00000000         ; * @addtogroup CORTEX-M3
   17 00000000         ; */
   18 00000000         ;/*@{*/
   19 00000000         
   20 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; interrupt control
                                                             state register
   21 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; system priority r
                                                            egister (2)
   22 00000000 00FF0000 
                       NVIC_PENDSV_PRI
                               EQU              0x00FF0000  ; PendSV priority v
                                                            alue (lowest)
   23 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; value to trigger 
                                                            PendSV exception
   24 00000000         
   25 00000000 00000040 
                       BASEPRI_MAX
                               EQU              0x40
   26 00000000         
   27 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   28 00000000                 THUMB
   29 00000000                 REQUIRE8
   30 00000000                 PRESERVE8
   31 00000000         
   32 00000000                 IMPORT           rt_thread_switch_interrupt_flag
   33 00000000                 IMPORT           rt_interrupt_from_thread
   34 00000000                 IMPORT           rt_interrupt_to_thread
   35 00000000         
   36 00000000         ;/*
   37 00000000         ; * rt_base_t rt_hw_interrupt_disable();
   38 00000000         ; */
   39 00000000         rt_hw_interrupt_disable
                               PROC
   40 00000000                 EXPORT           rt_hw_interrupt_disable
   41 00000000 F3EF 8011       MRS              r0, BASEPRI



ARM Macro Assembler    Page 2 


   42 00000004 F04F 0140       MOV              r1, #BASEPRI_MAX
   43 00000008 F381 8811       MSR              BASEPRI, r1
   44 0000000C         
   45 0000000C 4770            BX               LR
   46 0000000E                 ENDP
   47 0000000E         
   48 0000000E         ;/*
   49 0000000E         ; * void rt_hw_interrupt_enable(rt_base_t level);
   50 0000000E         ; */
   51 0000000E         rt_hw_interrupt_enable
                               PROC
   52 0000000E                 EXPORT           rt_hw_interrupt_enable
   53 0000000E F380 8811       MSR              BASEPRI, r0
   54 00000012 4770            BX               LR
   55 00000014                 ENDP
   56 00000014         
   57 00000014         ;/*
   58 00000014         ; * void rt_hw_context_switch(rt_uint32 from, rt_uint32 
                       to);
   59 00000014         ; * r0 --> from
   60 00000014         ; * r1 --> to
   61 00000014         ; */
   62 00000014         rt_hw_context_switch_interrupt
   63 00000014                 EXPORT           rt_hw_context_switch_interrupt
   64 00000014         rt_hw_context_switch
                               PROC
   65 00000014                 EXPORT           rt_hw_context_switch
   66 00000014         
   67 00000014         ; set rt_thread_switch_interrupt_flag to 1
   68 00000014 4A2A            LDR              r2, =rt_thread_switch_interrupt
_flag
   69 00000016 6813            LDR              r3, [r2]
   70 00000018 2B01            CMP              r3, #1
   71 0000001A D004            BEQ              _reswitch
   72 0000001C F04F 0301       MOV              r3, #1
   73 00000020 6013            STR              r3, [r2]
   74 00000022         
   75 00000022 4A28            LDR              r2, =rt_interrupt_from_thread ;
                                                             set rt_interrupt_f
                                                            rom_thread
   76 00000024 6010            STR              r0, [r2]
   77 00000026         
   78 00000026         _reswitch
   79 00000026 4A28            LDR              r2, =rt_interrupt_to_thread ; s
                                                            et rt_interrupt_to_
                                                            thread
   80 00000028 6011            STR              r1, [r2]
   81 0000002A         
   82 0000002A 4828            LDR              r0, =NVIC_INT_CTRL ; trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
   83 0000002C F04F 5180       LDR              r1, =NVIC_PENDSVSET
   84 00000030 6001            STR              r1, [r0]
   85 00000032 4770            BX               LR
   86 00000034                 ENDP
   87 00000034         
   88 00000034         ; r0 --> swith from thread stack
   89 00000034         ; r1 --> swith to thread stack



ARM Macro Assembler    Page 3 


   90 00000034         ; psr, pc, lr, r12, r3, r2, r1, r0 are pushed into [from
                       ] stack
   91 00000034         PendSV_Handler
                               PROC
   92 00000034                 EXPORT           PendSV_Handler
   93 00000034         
   94 00000034         ; disable interrupt to protect context switch
   95 00000034 F3EF 8210       MRS              r2, PRIMASK
   96 00000038 B672            CPSID            I
   97 0000003A         
   98 0000003A         ; get rt_thread_switch_interrupt_flag
   99 0000003A 4821            LDR              r0, =rt_thread_switch_interrupt
_flag
  100 0000003C 6801            LDR              r1, [r0]
  101 0000003E B191            CBZ              r1, pendsv_exit ; pendsv alread
                                                            y handled
  102 00000040         
  103 00000040         ; clear rt_thread_switch_interrupt_flag to 0
  104 00000040 F04F 0100       MOV              r1, #0x00
  105 00000044 6001            STR              r1, [r0]
  106 00000046         
  107 00000046 481F            LDR              r0, =rt_interrupt_from_thread
  108 00000048 6801            LDR              r1, [r0]
  109 0000004A B129            CBZ              r1, swtich_to_thread ; skip reg
                                                            ister save at the f
                                                            irst time
  110 0000004C         
  111 0000004C F3EF 8109       MRS              r1, psp     ; get from thread s
                                                            tack pointer
  112 00000050 E921 0FF0       STMFD            r1!, {r4 - r11} ; push r4 - r11
                                                             register
  113 00000054 6800            LDR              r0, [r0]
  114 00000056 6001            STR              r1, [r0]    ; update from threa
                                                            d stack pointer
  115 00000058         
  116 00000058         swtich_to_thread
  117 00000058 491B            LDR              r1, =rt_interrupt_to_thread
  118 0000005A 6809            LDR              r1, [r1]
  119 0000005C 6809            LDR              r1, [r1]    ; load thread stack
                                                             pointer
  120 0000005E         
  121 0000005E E8B1 0FF0       LDMFD            r1!, {r4 - r11} ; pop r4 - r11 
                                                            register
  122 00000062 F381 8809       MSR              psp, r1     ; update stack poin
                                                            ter
  123 00000066         
  124 00000066         pendsv_exit
  125 00000066         ; restore interrupt
  126 00000066 F382 8810       MSR              PRIMASK, r2
  127 0000006A         
  128 0000006A F04E 0E04       ORR              lr, lr, #0x04
  129 0000006E 4770            BX               lr
  130 00000070                 ENDP
  131 00000070         
  132 00000070         ;/*
  133 00000070         ; * void rt_hw_context_switch_to(rt_uint32 to);
  134 00000070         ; * r0 --> to
  135 00000070         ; * this fucntion is used to perform the first thread sw
                       itch



ARM Macro Assembler    Page 4 


  136 00000070         ; */
  137 00000070         rt_hw_context_switch_to
                               PROC
  138 00000070                 EXPORT           rt_hw_context_switch_to
  139 00000070         ; set to thread
  140 00000070 4915            LDR              r1, =rt_interrupt_to_thread
  141 00000072 6008            STR              r0, [r1]
  142 00000074         
  143 00000074         ; set from thread to 0
  144 00000074 4913            LDR              r1, =rt_interrupt_from_thread
  145 00000076 F04F 0000       MOV              r0, #0x0
  146 0000007A 6008            STR              r0, [r1]
  147 0000007C         
  148 0000007C         ; set interrupt flag to 1
  149 0000007C 4910            LDR              r1, =rt_thread_switch_interrupt
_flag
  150 0000007E F04F 0001       MOV              r0, #1
  151 00000082 6008            STR              r0, [r1]
  152 00000084         
  153 00000084         ; set the PendSV exception priority
  154 00000084 4812            LDR              r0, =NVIC_SYSPRI2
  155 00000086 F44F 017F       LDR              r1, =NVIC_PENDSV_PRI
  156 0000008A F8D0 2000       LDR.W            r2, [r0,#0x00] ; read
  157 0000008E EA41 0102       ORR              r1,r1,r2    ; modify
  158 00000092 6001            STR              r1, [r0]    ; write-back
  159 00000094         
  160 00000094         ; trigger the PendSV exception (causes context switch)
  161 00000094 480D            LDR              r0, =NVIC_INT_CTRL
  162 00000096 F04F 5180       LDR              r1, =NVIC_PENDSVSET
  163 0000009A 6001            STR              r1, [r0]
  164 0000009C         
  165 0000009C         ; enable interrupts at processor level
  166 0000009C B662            CPSIE            I
  167 0000009E         ; change base priority to 0
  168 0000009E F04F 0000       MOV              r0, #0x0
  169 000000A2 F380 8811       MSR              BASEPRI, r0
  170 000000A6         
  171 000000A6         ; never reach here!
  172 000000A6                 ENDP
  173 000000A6         
  174 000000A6         ; compatible with old version
  175 000000A6         rt_hw_interrupt_thread_switch
                               PROC
  176 000000A6                 EXPORT           rt_hw_interrupt_thread_switch
  177 000000A6 4770            BX               lr
  178 000000A8 BF00            NOP
  179 000000AA                 ENDP
  180 000000AA         
  181 000000AA                 IMPORT           rt_hw_hard_fault_exception
  182 000000AA                 EXPORT           HardFault_Handler
  183 000000AA         HardFault_Handler
                               PROC
  184 000000AA         
  185 000000AA         ; get current context
  186 000000AA F3EF 8009       MRS              r0, psp     ; get fault thread 
                                                            stack pointer
  187 000000AE B500            PUSH             {lr}
  188 000000B0 F7FF FFFE       BL               rt_hw_hard_fault_exception
  189 000000B4 F85D EB04       POP              {lr}



ARM Macro Assembler    Page 5 


  190 000000B8         
  191 000000B8 F04E 0E04       ORR              lr, lr, #0x04
  192 000000BC 4770            BX               lr
  193 000000BE BF00            NOP
  194 000000C0                 ENDP
  195 000000C0         
  196 000000C0                 END
              00000000 
              00000000 
              00000000 
              E000ED04 
              E000ED20 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\build\context_rvds.d -o.\build\context_rvds.o -I.\RTE\_rtthread 
-IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\
Keil\FM3HighPerformance_DFP\1.1.0\Device\Include\MB9B610T --predefine="__UVISIO
N_VERSION SETA 526" --predefine="_RTE_ SETA 1" --predefine="MB9BF618S SETA 1" -
-list=.\build\context_rvds.lst cpu\context_rvds.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 27 in file cpu\context_rvds.S
   Uses
      None
Comment: .text unused
HardFault_Handler 000000AA

Symbol: HardFault_Handler
   Definitions
      At line 183 in file cpu\context_rvds.S
   Uses
      At line 182 in file cpu\context_rvds.S
Comment: HardFault_Handler used once
PendSV_Handler 00000034

Symbol: PendSV_Handler
   Definitions
      At line 91 in file cpu\context_rvds.S
   Uses
      At line 92 in file cpu\context_rvds.S
Comment: PendSV_Handler used once
_reswitch 00000026

Symbol: _reswitch
   Definitions
      At line 78 in file cpu\context_rvds.S
   Uses
      At line 71 in file cpu\context_rvds.S
Comment: _reswitch used once
pendsv_exit 00000066

Symbol: pendsv_exit
   Definitions
      At line 124 in file cpu\context_rvds.S
   Uses
      At line 101 in file cpu\context_rvds.S
Comment: pendsv_exit used once
rt_hw_context_switch 00000014

Symbol: rt_hw_context_switch
   Definitions
      At line 64 in file cpu\context_rvds.S
   Uses
      At line 65 in file cpu\context_rvds.S
Comment: rt_hw_context_switch used once
rt_hw_context_switch_interrupt 00000014

Symbol: rt_hw_context_switch_interrupt
   Definitions
      At line 62 in file cpu\context_rvds.S
   Uses
      At line 63 in file cpu\context_rvds.S
Comment: rt_hw_context_switch_interrupt used once
rt_hw_context_switch_to 00000070

Symbol: rt_hw_context_switch_to



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 137 in file cpu\context_rvds.S
   Uses
      At line 138 in file cpu\context_rvds.S
Comment: rt_hw_context_switch_to used once
rt_hw_interrupt_disable 00000000

Symbol: rt_hw_interrupt_disable
   Definitions
      At line 39 in file cpu\context_rvds.S
   Uses
      At line 40 in file cpu\context_rvds.S
Comment: rt_hw_interrupt_disable used once
rt_hw_interrupt_enable 0000000E

Symbol: rt_hw_interrupt_enable
   Definitions
      At line 51 in file cpu\context_rvds.S
   Uses
      At line 52 in file cpu\context_rvds.S
Comment: rt_hw_interrupt_enable used once
rt_hw_interrupt_thread_switch 000000A6

Symbol: rt_hw_interrupt_thread_switch
   Definitions
      At line 175 in file cpu\context_rvds.S
   Uses
      At line 176 in file cpu\context_rvds.S
Comment: rt_hw_interrupt_thread_switch used once
swtich_to_thread 00000058

Symbol: swtich_to_thread
   Definitions
      At line 116 in file cpu\context_rvds.S
   Uses
      At line 109 in file cpu\context_rvds.S
Comment: swtich_to_thread used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BASEPRI_MAX 00000040

Symbol: BASEPRI_MAX
   Definitions
      At line 25 in file cpu\context_rvds.S
   Uses
      At line 42 in file cpu\context_rvds.S
Comment: BASEPRI_MAX used once
NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 20 in file cpu\context_rvds.S
   Uses
      At line 82 in file cpu\context_rvds.S
      At line 161 in file cpu\context_rvds.S

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 23 in file cpu\context_rvds.S
   Uses
      At line 83 in file cpu\context_rvds.S
      At line 162 in file cpu\context_rvds.S

NVIC_PENDSV_PRI 00FF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 22 in file cpu\context_rvds.S
   Uses
      At line 155 in file cpu\context_rvds.S
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 21 in file cpu\context_rvds.S
   Uses
      At line 154 in file cpu\context_rvds.S
Comment: NVIC_SYSPRI2 used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

rt_hw_hard_fault_exception 00000000

Symbol: rt_hw_hard_fault_exception
   Definitions
      At line 181 in file cpu\context_rvds.S
   Uses
      At line 188 in file cpu\context_rvds.S
Comment: rt_hw_hard_fault_exception used once
rt_interrupt_from_thread 00000000

Symbol: rt_interrupt_from_thread
   Definitions
      At line 33 in file cpu\context_rvds.S
   Uses
      At line 75 in file cpu\context_rvds.S
      At line 107 in file cpu\context_rvds.S
      At line 144 in file cpu\context_rvds.S

rt_interrupt_to_thread 00000000

Symbol: rt_interrupt_to_thread
   Definitions
      At line 34 in file cpu\context_rvds.S
   Uses
      At line 79 in file cpu\context_rvds.S
      At line 117 in file cpu\context_rvds.S
      At line 140 in file cpu\context_rvds.S

rt_thread_switch_interrupt_flag 00000000

Symbol: rt_thread_switch_interrupt_flag
   Definitions
      At line 32 in file cpu\context_rvds.S
   Uses
      At line 68 in file cpu\context_rvds.S
      At line 99 in file cpu\context_rvds.S
      At line 149 in file cpu\context_rvds.S

4 symbols
356 symbols in table
